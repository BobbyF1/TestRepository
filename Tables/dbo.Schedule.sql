CREATE TABLE [dbo].[Schedule]
(
[Id] [int] NOT NULL IDENTITY(1, 1),
[Description] [varchar] (512) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[RunDailyTime] [time] NULL,
[RunDailyMon] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailyTue] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailyWed] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailyThu] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailyFri] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailySat] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RunDailySun] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[RepeatTryDuration] [int] NULL,
[RepeatTryPause] [int] NULL,
[creation_date] [datetime] NOT NULL CONSTRAINT [DF_Schedule_creation_date] DEFAULT (getdate()),
[last_updated_date] [datetime] NOT NULL CONSTRAINT [DF_Schedule_last_updated_date] DEFAULT (getdate())
) ON [PRIMARY]
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE TRIGGER [dbo].[trg_Schedule_updated]
ON [dbo].[Schedule]
FOR UPDATE
AS
--start_autogenerated_trigger_text  - do not edit comments or code!
IF (suser_name() = 'svc_sync_user') OR (suser_name() = 'svc_agent_user')  RETURN
--end_autogenerated_trigger_text

BEGIN

 SET NOCOUNT ON 

 UPDATE dbo.Schedule SET dbo.Schedule.last_updated_date = GETDATE()
 FROM inserted
 WHERE inserted.Id = dbo.Schedule.Id

END
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE TRIGGER [dbo].[trg_Schedule_updated_jobs]
ON [dbo].[Schedule]
AFTER UPDATE
AS
BEGIN
---------------------------------------------------------------------------------------------------------  
-- v01 01/12/2014 PF Original Version. When a schedule is updated, refresh the Next Run times on all jobs
--                   that use this schedule
---------------------------------------------------------------------------------------------------------  

SET NOCOUNT ON

DECLARE @JobId int

DECLARE jobs CURSOR FOR 
SELECT JobId FROM JobSchedule
WHERE ScheduleId in (SELECT Id From inserted)

OPEN jobs
FETCH jobs into @JobId

while @@FETCH_STATUS = 0
BEGIN
	EXEC sp_set_next_trigger_time @JobId 
	FETCH jobs into @JobId	
END

CLOSE jobs
DEALLOCATE jobs

END
GO
ALTER TABLE [dbo].[Schedule] ADD CONSTRAINT [PK_Schedule] PRIMARY KEY CLUSTERED  ([Id]) ON [PRIMARY]
GO
